#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import optparse
import sys
sys.path = ['../abe_h'] + sys.path
import abe_h

############################################################# INTERNAL FUNCTIONS
################################################################################
def handle_input(inp, options):
    if options.text_out:
        sys.stdout.write( abe_h.text(inp))
    elif options.code_out:
        sys.stdout.write( abe_h.code(inp))
    else:
        sys.stdout.write( abe_h.unite( options.format, inp) + '\n')

########################################################################### MAIN
################################################################################
def main():
    p = optparse.OptionParser()
    p.add_option('--format', '-f', action='store', dest='format', default=None, help='Input format (mandatory)')
    p.add_option('--input', '-i', action='store', dest='input', default=None, help='Raw input (ignores other input if supplied)')
    p.add_option('--fields', '-d', action='store', dest='fields', default=None, help='Predefined field contents (json, optionnal)')
    p.add_option('--text_out','-t', action='store_true', dest='text_out', help='Extract text')
    p.add_option('--code_out','-c', action='store_true', dest='code_out', help='Extract code')
    options, arguments = p.parse_args()

    if options.text_out and options.code_out:
        raise SystemExit('Cannot output both code and text')

    if options.format is None and not (options.text_out or options.code_out):
        raise SystemExit('Format not given')

    if options.input is not None:
        handle_input(options.input, options)
    else:
       if options.text_out or options.code_out:
            buff = []
            for input_line in sys.stdin:
                buff.append(input_line)
            handle_input(''.join(buff), options)
       else:
           for input_line in sys.stdin:
            handle_input(input_line, options)

if __name__ == '__main__':
  main()


